{
  "files": [],
  "references": [
    {
      "path": "./tsconfig.node.json"
    },
    {
      "path": "./tsconfig.app.json"
    }
  ],
  // 定义哪些文件夹下面的文件被被编译
  "include": [
    "src/**/*.ts",
    "src/**/*.d.ts",
    "src/**/*.tsx",
    "src/**/*.vue",
    "build/**/*.ts",
    "vite.config.ts"
  ],
  // 定义哪些是不被处理的
  "exclude": ["./src/comjs/**/*", "node_modules", "dist", "**/*.js"],
  "compilerOptions": {
    "baseUrl": "./", // 解析非相对模块名的基准目录
    "target": "ESNext", // 设置需要转换的es版本,
    "module": "ESNext", // 指定使用模块化规范
    "outDir": "./dist", //指定编译后文件的输出目录
    // "outFile": "System.js", // 把所有需要编译的文件打到一个文件中，这里需要和module配合，module必须要为amd或者system
    "lib": ["esnext", "dom", "DOM.Iterable", "ScriptHost"], // 指定要包含在编译中的库文件,一般来说在浏览器环境下不需要改动，在node等环境下可能改动，可选择的查看https://www.typescriptlang.org/tsconfig#lib
    "types": ["vite/client"], //用来提供import.meta.env 上 Vite 注入的环境变量的类型定义
    "allowJs": false, // 是否对js文件进行编译, 默认false
    "checkJs": false, // 是否去检查js语法， 会给js加入ts的检查规则
    "removeComments": false, // 在转换的过程中是否移除注释
    "noEmit": false, //不生成编译文件
    "noEmitOnError": false, //当有错误的时候不编译生成文件
    "alwaysStrict": true, //使用编译后是严格模式
    "noImplicitAny": false, //不允许隐的any
    "noImplicitThis": false, // 不允许不明确的this使用
    "strictNullChecks": false, //严格检查null值
    "strict": false, // 严格检查的总开关
    "skipLibCheck": true, // 跳过对 .d.ts 文件的类型检查
    "allowSyntheticDefaultImports": true, // 允许从没有设置默认导出的模块中默认导入。这并不影响代码的输出，仅为了类型检查
    "resolveJsonModule": true,
    "moduleResolution": "Bundler",
    // 模块名到基于 baseUrl的路径映射的列表。
    "paths": {
      "@": ["src"], //解决引入报错  找不到模块“@/xxxx” 或其相应的类型声明
      "@/*": ["src/*"]
    }
  }
}
